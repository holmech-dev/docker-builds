#FROM ros:noetic
FROM nvidia/cuda:11.1.1-devel-ubuntu20.04

USER root

# disable interactive configuration mode
ENV DEBIAN_FRONTEND noninteractive

###########################################################################################################
# Intall some basic GUI and sound libs
###########################################################################################################
RUN apt-get update \
    && \
    apt-get install -y \
        build-essential \
        ca-certificates \
        cmake-qt-gui \
        dbus-x11 \
        dmz-cursor-theme \
        file \
        fonts-dejavu \
        fonts-liberation \
        git \
        gnome-terminal \
        hicolor-icon-theme \
        language-pack-en \
        libasound2 \
        libcanberra-gtk3-0 \
        libcanberra-gtk-module \
        libcanberra-gtk3-module \
        libcurl4-gnutls-dev \
        libdbus-glib-1-2 \
        libexif12 \
        libgl1-mesa-glx \
        libgl1-mesa-dri \
        libgtk2.0-0 \
        libxt6 \
        locales \
        nano \
        pulseaudio \
        software-properties-common \
        sudo \
        tar \
        unzip \
        vim \
        wget \
        xz-utils \
        zlib1g-dev \
        net-tools \
        ifstat \
        chrony \
        curl \
        gnupg \
        libace* \
        ogre-1.9* \
        libcgal* \
        protobuf-compiler \
        libopencv-core-dev \
        libncurses5-dev \
        libglademm-2.4-1v5 \
        libglade2-0 \
        libv4l-dev \
        v4l-utils \
        liborocos-kdl-dev \
        libncurses-dev \
        libpcap-dev \
        pcl-tools \
        libopencv-dev \
        build-essential \
        cmake \
        git \
        pkg-config \
        libgtk-3-dev \
        libavcodec-dev \
        libavformat-dev \
        libswscale-dev \
        libv4l-dev \
        libxvidcore-dev \
        libx264-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        gfortran \
        openexr \
        libatlas-base-dev \
        python3-dev \
        python3-opencv \
        python3-numpy \
        libtbb2 \
        libtbb-dev \
        libdc1394-22-dev \
        libopenexr-dev \
        libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev \
        usbutils \
        linux-headers-generic \
        python3-pip \
    && \
    rm -rf /var/lib/apt/lists/* \
    && \
    update-locale LANG=en_US.UTF-8 LC_MESSAGES=POSIX
###########################################################################################################


# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8
RUN update-locale LANG=en_US.UTF-8 LC_MESSAGES=POSIX
ENV PULSE_SERVER /run/pulse/native

RUN echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list
RUN curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -

RUN apt-get update \
    && \
    apt-get install -y \
        ros-noetic-desktop-full \
        ros-noetic-rosdoc-lite \
        python3-rosdep \
        python3-rosinstall \
        python3-rosinstall-generator \
        python3-wstool \
        build-essential \
        ros-noetic-nmea-msgs \
        python3-rosdep && \
    apt-get clean -y && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

###########################################################################################################

RUN cd /usr/include \
    && \
    ln -sf libxml2/libxml libxml

###########################################################################################################

RUN mkdir /home/projects

COPY copy_files/qwt-6.1.2.zip /home/projects
    RUN cd /home/projects \
        && \
        unzip qwt-6.1.2.zip \
        && \
        cd qwt-6.1.2 \
        && \
        /usr/lib/x86_64-linux-gnu/qt5/bin/qmake qwt.pro \
        && \
        make \
        && \
        make install

COPY copy_files/IbeoSDK.zip /home/projects
    RUN cd /home/projects \
        && \
        unzip IbeoSDK.zip \
        && \
        cd IbeoSDK\
        && \
        make clean \
        && \
        rm -rf libs \
        && \
        make all \
        && \
        make shared \
        && \
        make static

COPY copy_files/linuxcan.zip /home/projects
    RUN cd /home/projects \
        && \
        unzip linuxcan.zip \
        && \
        cd linuxcan \
        && \
        make install \
        && \
        cd /home/projects/linuxcan/usbcanII \
        && \
        ./installscript.sh

COPY copy_files/OpenDriveV1.3.12.zip /home/projects
    RUN cd /home/projects \
        && \
        unzip OpenDriveV1.3.12.zip \
        && \
        cd OpenDriveV1.3.12/inc \
        && \
        cp -r ./ /usr/local/include \
        && \
        cd ../.. \
        && \
        cd OpenDriveV1.3.12/lib/x64 \
        && \
        sudo cp * /usr/local/lib

###########################################################################################################




###########################################################################################################

#COPY copy_files/cuda-ubuntu2004.pin /home
#    RUN cd /home \
#    && \
#    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600

#COPY copy_files/cuda-repo-ubuntu2004-11-1-local_11.1.0-455.23.05-1_amd64.deb /home
#    RUN cd /home \
#        && \
#        dpkg -i cuda-repo-ubuntu2004-11-1-local_11.1.0-455.23.05-1_amd64.deb \
#        && \
#        apt-key add /var/cuda-repo-ubuntu2004-11-1-local/7fa2af80.pub \
#        && \
#        apt-get update \
#        && \
#        apt-get -y install cuda


###########################################################################################################

#COPY copy_files/cudnn-11.1-linux-x64-v8.0.5.39.tgz /home
#    RUN cd /home \
#    && \
#    tar -zxvf cudnn-11.1-linux-x64-v8.0.5.39.tgz \
#    && \
#    sudo cp cuda/lib64/* /usr/local/cuda-11.1/lib64/ \
#    && \
#    sudo cp cuda/include/* /usr/local/cuda-11.1/include/ \
#    && \
#    sudo chmod a+r /usr/local/cuda-11.1/include/cudnn.h \
#    && \
#    sudo chmod a+r /usr/local/cuda-11.1/lib64/libcudnn* \
#    && \
#    cat /usr/local/cuda/include/cudnn_version.h | grep CUDNN_MAJOR -A 2

###########################################################################################################

#COPY copy_files/TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz /home
#    RUN cd /home \
#        && \
#        tar -zxvf TensorRT-7.2.2.3.Ubuntu-18.04.x86_64-gnu.cuda-11.1.cudnn8.0.tar.gz \
#        && \
#        mv TensorRT-7.2.2.3 /usr/local/TensorRT-7.2.2.3 \
#        && \
#        ln -s /usr/local/TensorRT-7.2.2.3 /usr/local/tensorrt
#        #&& \
#        #pip install tensorflow-gpu==2.4 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com

#ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/tensorrt/lib

###########################################################################################################

COPY copy_files/opencv.zip /home
    RUN cd /home \
    && \
    unzip opencv.zip 

COPY copy_files/opencv_contrib.zip /home
    RUN cd /home \
    && \
    unzip opencv_contrib.zip 

RUN cd /home/opencv \
    && \
    mkdir build \
    && \
    cd build \
    && \
    cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_CUDA=ON -D OPENCV_EXTRA_MODULES_PATH=/home/opencv_contrib/modules \
    -D OPENCV_ENABLE_NONFREE=ON -D BUILD_NEW_PYTHON_SUPPORT_ON=ON \
    -D BUILD_opencv_python3=ON -D HAVE_opencv_python3=ON \
    -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 .. \
    && \
    make -j8 \
    && \
    make install \
    && \
   ldconfig

###########################################################################################################

ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics