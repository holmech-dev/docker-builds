FROM holmech:kinetic-base

USER root


# From nvidia cuda 9.0 base: https://gitlab.com/nvidia/cuda/tree/ubuntu16.04/9.0/base/Dockerfile

RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates apt-transport-https gnupg-curl && \
    rm -rf /var/lib/apt/lists/* && \
    NVIDIA_GPGKEY_SUM=d1be581509378368edeec8c1eb2958702feedf3bc3d17011adbf24efacce4ab5 && \
    NVIDIA_GPGKEY_FPR=ae09fe4bbd223a84b2ccfce3f60f4b3d7fa2af80 && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub && \
    apt-key adv --export --no-emit-version -a $NVIDIA_GPGKEY_FPR | tail -n +5 > cudasign.pub && \
    echo "$NVIDIA_GPGKEY_SUM  cudasign.pub" | sha256sum -c --strict - && rm cudasign.pub && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list

ENV CUDA_VERSION 10.0.130

ENV CUDA_PKG_VERSION 10-0=$CUDA_VERSION-1

#ENV CUDA_VERSION 9.0.176
#ENV CUDA_PKG_VERSION 9-0=$CUDA_VERSION-1

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-cudart-$CUDA_PKG_VERSION && \
    ln -s cuda-10.0 /usr/local/cuda && \
    rm -rf /var/lib/apt/lists/*

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV NVIDIA_REQUIRE_CUDA "cuda>=10.0"


# From nvidia cuda 9.0 runtime: https://gitlab.com/nvidia/cuda/blob/ubuntu16.04/9.0/runtime/Dockerfile

ENV NCCL_VERSION 2.4.8

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-libraries-$CUDA_PKG_VERSION \
        cuda-cublas-$CUDA_PKG_VERSION \
        libnccl2=$NCCL_VERSION-1+cuda10.0 && \
        apt-mark hold libnccl2 && \
        rm -rf /var/lib/apt/lists/*

# From nvidia cuda 9.0 devel: https://gitlab.com/nvidia/cuda/blob/ubuntu16.04/9.0/devel/Dockerfile

RUN apt-get update && apt-get install -y --no-install-recommends \
        cuda-libraries-dev-$CUDA_PKG_VERSION \
        cuda-nvml-dev-$CUDA_PKG_VERSION \
        cuda-minimal-build-$CUDA_PKG_VERSION \
        cuda-command-line-tools-$CUDA_PKG_VERSION \
        cuda-core-$CUDA_PKG_VERSION \
        cuda-cublas-dev-$CUDA_PKG_VERSION \
        libnccl-dev=$NCCL_VERSION-1+cuda10.0 && \
    rm -rf /var/lib/apt/lists/*

ENV LIBRARY_PATH /usr/local/cuda/lib64/stubs

# Support for Nvidia docker v2

RUN apt-get update && apt-get install -y --no-install-recommends \
        pkg-config \
        libxau-dev \
        libxdmcp-dev \
        libxcb1-dev \
        libxext-dev \
        libx11-dev && \
    rm -rf /var/lib/apt/lists/*
COPY --from=nvidia/opengl:1.0-glvnd-runtime-ubuntu16.04 \
  /usr/local/lib/x86_64-linux-gnu \
  /usr/lib/x86_64-linux-gnu
COPY --from=nvidia/opengl:1.0-glvnd-runtime-ubuntu16.04 \
  /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json \
  /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json
RUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \
    ldconfig
RUN apt-get update
# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics



###############################################################################################################
### ok, now that we have proper deb-installed CUDA 10 we can install TensorRT. this is carefully selected version that works!
###############################################################################################################

COPY copy_files/tensorrt/nv-tensorrt-repo-ubuntu1604-cuda10.0-trt5.1.5.0-ga-20190427_1-1_amd64.deb /root/

ENV CUDNN_VERSION 7.6.5.32

RUN dpkg -i /root/nv-tensorrt-repo-ubuntu1604-cuda10.0-trt5.1.5.0-ga-20190427_1-1_amd64.deb && \
    apt-key add /var/nv-tensorrt-repo-cuda10.0-trt5.1.5.0-ga-20190427/7fa2af80.pub && \
    apt update && \
    apt install -y libnvinfer5=5.1.5-1+cuda10.0  \
                   libnvinfer-dev=5.1.5-1+cuda10.0  \
                   libcudnn7=$CUDNN_VERSION-1+cuda10.0  \
                   libcudnn7-dev=$CUDNN_VERSION-1+cuda10.0  \
                   tensorrt && \
    rm /root/nv-tensorrt-repo-ubuntu1604-cuda10.0-trt5.1.5.0-ga-20190427_1-1_amd64.deb


#git clone --recursive https://github.com/onnx/onnx.git
#cd onnx
#TENSORRT_ROOT=/home/nissan/Downloads/TensorRT-5.0.2.6 python setup.py build

###############################################################################################################
### PCL Library
###############################################################################################################
# PCL - build from source and install (with fix [Eucliean Clustering] Illegal memory access bug - cherry pick fix commit)
RUN cd /opt \
   && git clone https://github.com/PointCloudLibrary/pcl.git \
   && cd /opt/pcl && git checkout pcl-1.9.0 \ 
   && mkdir build && cd build \
   && cmake \
        -DCMAKE_BUILD_TYPE=Release \
        -DBUILD_CUDA=ON -DBUILD_GPU=ON \
        -DBUILD_apps=ON \
        -DBUILD_examples=ON \
        -DBUILD_global_tests=ON .. \
   && cd /opt/pcl/build && make -j2 \
   && cd /opt/pcl/build && make install \
   && rm -rf /var/lib/apt/lists/* 

###############################################################################################################
### Opencv 4.4.0
###############################################################################################################
#libtbb2 \
#libtbb2-dev \

#RUN mkdir /root/opencv
#COPY copy_files/opencv-4.4.0.zip /root/opencv
#COPY copy_files/opencv_contrib-4.4.0.zip /root/opencv

#RUN apt update \
#    && \
#    apt-get install -y \
#              libjpeg-dev \
#              libtiff-dev \
#              libjasper-dev \
#              libpng-dev \
#              libgtk2.0-dev \
#              libavcodec-dev \
#              libavformat-dev \
#              libswscale-dev \
#              libv4l-dev \
#              libatlas-base-dev \
#              gfortran \
#              libhdf5-serial-dev \
#              pkg-config \
#    && \
#    cd /root/opencv \
#    && \
#    unzip opencv-4.4.0.zip \ 
#    && \
#    unzip opencv_contrib-4.4.0.zip \
#    && \
#    mkdir /root/opencv/opencv-4.4.0/build \
#    && \
#    cd /root/opencv/opencv-4.4.0/build \
#    && \
#    cmake -D CMAKE_BUILD_TYPE=RELEASE \
#          -D CMAKE_INSTALL_PREFIX=/usr/local \
#          -D WITH_CUDA=ON \
#          -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.4.0/modules \
#          -D OPENCV_ENABLE_NONFREE=ON \
#          -D BUILD_NEW_PYTHON_SUPPORT_ON=ON \
#          -D BUILD_opencv_python3=ON \
#          -D HAVE_opencv_python3=ON \
#          -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3 .. \

#    && \
#    make -j"$(nproc)" \
#    && \
#    make install \
#    && \
#    ldconfig \
#    && \
#    rm -rf /root/opencv \
#    && \
#    rm -rf /var/lib/apt/lists/* 

#RUN useradd -ms /bin/bash docker
#USER docker

###############################################################################################################
### User Add, sudo cmds with no pw required
###############################################################################################################
#ARG USERNAME=holmech
#ARG USER_UID=1000
#ARG USER_GID=$USER_UID

# Create the user
#RUN groupadd --gid $USER_GID $USERNAME \
#    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME 
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    #&& apt-get update \
    #&& apt-get install -y sudo \
    #&& echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    #&& chmod 0440 /etc/sudoers.d/$USERNAME

#USER $USERNAME